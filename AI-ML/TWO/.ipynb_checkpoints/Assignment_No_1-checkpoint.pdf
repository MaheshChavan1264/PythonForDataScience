{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#====================================================================================\n",
    "# Assignment NO.1 : Back Propagation Algorithm\n",
    "# Name: Mahesh Tatyasaheb Chavan\n",
    "# Roll No.: BETB64\n",
    "#====================================================================================\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def tanh(x):\n",
    "    return(np.exp(x)-np.exp(-x))/(np.exp(x)+np.exp(-x))\n",
    "def tanh_derivative(x):\n",
    "    return(1-((np.exp(x)-np.exp(-x))/(np.exp(x)+np.exp(-x)))**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Starting synaptic weights: \n",
      "[[-0.16595599]\n",
      " [ 0.44064899]\n",
      " [-0.99977125]]\n"
     ]
    }
   ],
   "source": [
    "training_inputs = np.array([[0,0,1],\n",
    "                            [1,1,1],\n",
    "                            [1,0,1],\n",
    "                            [0,1,1]])\n",
    "training_outputs = np.array([[0,1,1,0]]).T\n",
    "np.random.seed(1)\n",
    "synaptic_weights = 2*np.random.random((3,1))-1\n",
    "print('Random Starting synaptic weights: ')\n",
    "print(synaptic_weights)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 1st iterations:\n",
      "[[0.96111914]\n",
      " [0.99998424]\n",
      " [0.99919809]\n",
      " [0.99922115]]\n"
     ]
    }
   ],
   "source": [
    "for iteration in range(1):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 1st iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 2nd iterations:\n",
      "[[0.24055659]\n",
      " [0.99739234]\n",
      " [0.97564141]\n",
      " [0.87824804]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for iteration in range(2):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 2nd iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 10 iterations:\n",
      "[[-0.21819918]\n",
      " [ 0.95411964]\n",
      " [ 0.96412559]\n",
      " [-0.3340008 ]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for iteration in range(10):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 10 iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 1000 iterations:\n",
      "[[-0.33026858]\n",
      " [ 0.99940135]\n",
      " [ 0.99959432]\n",
      " [-0.49127047]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for iteration in range(1000):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 1000 iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 5000 iterations:\n",
      "[[-0.33024703]\n",
      " [ 0.99982755]\n",
      " [ 0.99988317]\n",
      " [-0.49133189]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for iteration in range(5000):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 5000 iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outputs after 2nd iterations:\n",
      "[[-0.33023937]\n",
      " [ 0.99997876]\n",
      " [ 0.99998561]\n",
      " [-0.49135348]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for iteration in range(50000):\n",
    "    input_layer = training_inputs\n",
    "    outputs=tanh(np.dot(input_layer,synaptic_weights))\n",
    "    error=training_outputs-outputs\n",
    "    adjustments=error*tanh_derivative(outputs)\n",
    "    synaptic_weights=synaptic_weights + np.dot(input_layer.T,adjustments)\n",
    "print('Outputs after 2nd iterations:')\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
